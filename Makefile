help:  ## Show help
	@grep -E '^[.a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

# MACHTYPE only needs to be specified for `pcc` and `alpha`
# MACHTYPE=pcc
HG_DEFS=-D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_GNU_SOURCE -DMACHTYPE_$(MACHTYPE)
COPTS=-O2 -Isrc/pyblat/extc/include/core -Isrc/pyblat/extc/include/aux -Isrc/pyblat/extc/include/net -Isrc/pyblat/extc/bindings $(HG_DEFS)

LIBNAME = libblat.a
SRCDIRS = src/pyblat/extc/src/core src/pyblat/extc/src/aux src/pyblat/extc/src/net
SRCS = $(foreach dir,$(SRCDIRS),$(wildcard $(dir)/*.c))
OBJS = $(SRCS:.c=.o)


$(OBJS): $(SRCS)
	$(CC) $(COPTS) $(CFLAGS) -c $< -o $@

$(LIBNAME): $(OBJS)
	ar rcs $(LIBNAME) $(OBJS)

cgfServer: $(LIBNAME) ## Build gfServer
	$(CXX) $(COPTS) $(CFLAGS) src/pyblat/extc/bindings/gfServer.cpp  &(OBJS)  -o bin/gfServer -lm -pthread -lhts -lssl -lcrypto  -lblat

gfServer2: bin $(LIBNAME) ## Build gfServer
	$(CC) $(COPTS) $(CFLAGS)  -o bin/gfServer2 src/pyblat/extc/gfServer.c  libblat.a

all_bin: blat faToTwoBit gfClient gfServer

bin: ## Create bin folder
	mkdir bin

blat: bin ## Build blat
	$(CC) $(COPTS) $(CFLAGS) -DBLAT src/pyblat/extc/blat.c src/pyblat/extc/src/core/*.c src/pyblat/extc/src/aux/*.c -o bin/blat -lm -pthread -lhts -lssl -lcrypto

faToTwoBit: bin ## Build faToTwoBit
	$(CC) $(COPTS) $(CFLAGS) src/pyblat/extc/faToTwoBit.c src/pyblat/extc/src/core/*.c src/pyblat/extc/src/aux/*.c src/pyblat/extc/src/net/*.c  -o bin/faToTwoBit -lm -pthread -lhts -lssl -lcrypto

faToTwoBit2: bin ## Build faToTwoBit
	$(CXX) $(COPTS) $(CFLAGS) src/pyblat/extc/bindings/faToTwoBit.cpp src/pyblat/extc/src/core/*.c src/pyblat/extc/src/aux/*.c src/pyblat/extc/src/net/*.c  -o bin/faToTwoBit -lm -pthread -lhts -lssl -lcrypto

gfClient: bin ## Build gfClient
	$(CC) $(COPTS) $(CFLAGS) src/pyblat/extc/gfClient.c src/pyblat/extc/src/core/*.c src/pyblat/extc/src/aux/*.c src/pyblat/extc/src/net/*.c  -o bin/gfClient -lm -pthread -lhts -lssl -lcrypto

gfServer: bin ## Build gfServer
	$(CC) $(COPTS) $(CFLAGS) src/pyblat/extc/gfServer.c src/pyblat/extc/src/core/*.c src/pyblat/extc/src/aux/*.c src/pyblat/extc/src/net/*.c  -o bin/gfServer -lm -pthread -lhts -lssl -lcrypto

clean: ## Clean autogenerated files
	rm -f bin/*
	rm -rf dist
	rm -rf build
	find . -type f -name "*.DS_Store" -ls -delete
	find . | grep -E "(__pycache__|\.pyc|\.pyo)" | xargs rm -rf
	find . | grep -E ".pytest_cache" | xargs rm -rf
	find . | grep -E ".ipynb_checkpoints" | xargs rm -rf
	find . -name "*.o" -type f -delete
	rm -f .coverage

clean-logs: ## Clean logs
	rm -rf logs/**
	rm -rf export
	rm -rf pdf_files

format: ## Run pre-commit hooks
	pre-commit run -a

install: ## install the lib
	poetry install

clangd:
	bear -- make all_bin


clean-bind: ## clean previous binding directory
	rm -rf bindings && mkdir bindings


SOURCE := utils
BLOCK := arm sse emm
NAMESPACE := StripedSmithWaterman
INCLUDE := src/mssw/src


all_include: ## make all include files into all_include.hpp
	python ${SOURCE}/generate_headers.py ${INCLUDE} ${BLOCK}


bind:  clean-bind  all_include ## make bindings for python
	#https://cppbinder.readthedocs.io/en/latest/config.html
	docker run -it --rm -v `pwd`:/bind yangliz5/binder:1.0.1 \
	  binder --root-module _cpp \
	  --prefix /bind/bindings \
	  --bind ${NAMESPACE} \
	  /bind/all_includes.hpp \
	  -- -std=c++17 -I/bind/${INCLUDE} \
	  -I/usr/include \
	  -DMY_PROJECT_DEFINE -DNDEBUG

	 echo "Binding Cpp to python"
